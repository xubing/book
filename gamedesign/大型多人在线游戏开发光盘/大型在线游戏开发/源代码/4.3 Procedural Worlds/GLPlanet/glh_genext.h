/* File generated by extgen.cpp -- do not modify */
#ifndef GLH_GENEXT_H
#define GLH_GENEXT_H

#include <GL/gl.h>
#include "glext.h"
#ifdef _WIN32 /* supports windows, x -- need to generalize */
#  include "wglext.h"
#  define GLH_EXT_GET_PROC_ADDRESS(p)   wglGetProcAddress(p) 
#else if GLX_VERSION_1_3
#  include <GL/glxext.h>
#  define GLH_EXT_GET_PROC_ADDRESS(p)   glXGetProcAddressARB(p) 
#endif

#ifdef GLH_EXT_SINGLE_FILE
	#define GLH_EXTERN
 #define GLH_INITIALIZER = 0
#else
	#define GLH_EXTERN extern
 #define GLH_INITIALIZER
#endif

#ifdef GL_ARB_multitexture
    GLH_EXTERN PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLACTIVETEXTUREARBPROC glActiveTextureARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB GLH_INITIALIZER;
#endif

#ifdef GL_ARB_texture_border_clamp
#endif

#ifdef GL_ARB_texture_compression
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB GLH_INITIALIZER;
#endif

#ifdef GL_ARB_texture_cube_map
#endif

#ifdef GL_ARB_transpose_matrix
    GLH_EXTERN PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB GLH_INITIALIZER;
#endif

#ifdef GL_EXT_abgr
#endif

#ifdef GL_EXT_bgra
#endif

#ifdef GL_EXT_blend_color
    GLH_EXTERN PFNGLBLENDCOLOREXTPROC glBlendColorEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_blend_minmax
    GLH_EXTERN PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_blend_subtract
#endif

#ifdef GL_EXT_compiled_vertex_array
    GLH_EXTERN PFNGLLOCKARRAYSEXTPROC glLockArraysEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_fog_coord
    GLH_EXTERN PFNGLFOGCOORDDEXTPROC glFogCoorddEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDFEXTPROC glFogCoordfEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_light_max_exponent
#endif

#ifdef GL_EXT_packed_pixels
#endif

#ifdef GL_EXT_paletted_texture
    GLH_EXTERN PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEEXTPROC glcolorTableEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_point_parameters
    GLH_EXTERN PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_rescale_normal
#endif

#ifdef GL_EXT_secondary_color
    GLH_EXTERN PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_separate_specular_color
#endif

#ifdef GL_EXT_shared_texture_palette
#endif

#ifdef GL_EXT_stencil_wrap
#endif

#ifdef GL_EXT_texture_compression_s3tc
#endif

#ifdef GL_EXT_texture_cube_map
#endif

#ifdef GL_EXT_texture_edge_clamp
#endif

#ifdef GL_EXT_texture_env_add
#endif

#ifdef GL_EXT_texture_env_combine
#endif

#ifdef GL_EXT_texture_filter_anisotropic
#endif

#ifdef GL_EXT_texture_lod_bias
#endif

#ifdef GL_EXT_texture_object
    GLH_EXTERN PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDTEXTUREEXTPROC glBindTextureEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENTEXTURESEXTPROC glGenTexturesEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLISTEXTUREEXTPROC glIsTextureEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_vertex_array
    GLH_EXTERN PFNGLARRAYELEMENTEXTPROC glArrayElementEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORPOINTEREXTPROC glColorPointerEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPOINTERVEXTPROC glGetPointervEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT GLH_INITIALIZER;
#endif

#ifdef GL_EXT_vertex_weighting
    GLH_EXTERN PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT GLH_INITIALIZER;
#endif

#ifdef GL_NV_blend_square
#endif

#ifdef GL_NV_evaluators
    GLH_EXTERN PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLEVALMAPSNVPROC glEvalMapsNV GLH_INITIALIZER;
#endif

#ifdef GL_NV_fence
    GLH_EXTERN PFNGLGENFENCESNVPROC glGenFencesNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEFENCESNVPROC glDeleteFencesNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLSETFENCENVPROC glSetFenceNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLTESTFENCENVPROC glTestFenceNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINISHFENCENVPROC glFinishFenceNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLISFENCENVPROC glIsFenceNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFENCEIVNVPROC glGetFenceivNV GLH_INITIALIZER;
#endif

#ifdef GL_NV_fog_distance
#endif

#ifdef GL_NV_packed_depth_stencil
#endif

#ifdef GL_NV_register_combiners
    GLH_EXTERN PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERINPUTNVPROC glCombinerInputNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV GLH_INITIALIZER;
#endif

#ifdef GL_NV_register_combiners2
    GLH_EXTERN PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV GLH_INITIALIZER;
#endif

#ifdef GL_NV_texgen_reflection
#endif

#ifdef GL_NV_texture_env_combine4
#endif

#ifdef GL_NV_texture_rectangle
#endif

#ifdef GL_NV_texture_shader
#endif

#ifdef GL_NV_vertex_array_range
    GLH_EXTERN PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV GLH_INITIALIZER;
# ifdef _WIN32
    GLH_EXTERN PFNWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV GLH_INITIALIZER;
# endif
# ifdef GLX_VERSION_1_3
    GLH_EXTERN PFNGLXALLOCATEMEMORYNVPROC glXAllocateMemoryNV GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLFREEMEMORYNVPROC wglFreeMemoryNV GLH_INITIALIZER;
# endif
# ifdef GLX_VERSION_1_3
    GLH_EXTERN PFNGLXFREEMEMORYNVPROC glXFreeMemoryNV GLH_INITIALIZER;
# endif
#endif

#ifdef GL_NV_vertex_program
    GLH_EXTERN PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDPROGRAMNVPROC glBindProgramNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENPROGRAMSNVPROC glGenProgramsNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMIVNVPROC glGetProgramivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLISPROGRAMNVPROC glIsProgramNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADPROGRAMNVPROC glLoadProgramNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLTRACKMATRIXNVPROC glTrackMatrixNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_texture_lod
#endif

#ifdef GL_SGIX_depth_texture
#endif

#ifdef GL_SGIX_shadow
#endif

#ifdef GL_VERSION_1_2
    /* These routines are prefixed by an underbar because these
       names without underbars are officially part of the
       OpenGL 1.2 namespace. */
    GLH_EXTERN PFNGLBLENDCOLORPROC _glBlendColor GLH_INITIALIZER;
    GLH_EXTERN PFNGLBLENDEQUATIONPROC _glBlendEquation GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWRANGEELEMENTSPROC _glDrawRangeElements GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPROC _glColorTable GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPARAMETERFVPROC _glColorTableParameterfv GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPARAMETERIVPROC _glColorTableParameteriv GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCOLORTABLEPROC _glCopyColorTable GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPROC _glGetColorTable GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERFVPROC _glGetColorTableParameterfv GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERIVPROC _glGetColorTableParameteriv GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXIMAGE3DPROC _glTexImage3D GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXSUBIMAGE3DPROC _glTexSubImage3D GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYTEXSUBIMAGE3DPROC _glCopyTexSubImage3D GLH_INITIALIZER;
#endif

#ifdef GL_WIN_swap_hint
    GLH_EXTERN PFNGLADDSWAPHINTRECTWINPROC glAddSwapHintRectWIN GLH_INITIALIZER;
#endif

#ifdef WGL_ARB_pbuffer
# ifdef _WIN32
    GLH_EXTERN PFNWGLCREATEPBUFFERARBPROC wglCreatePbufferARB GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLQUERYPBUFFERARBPROC wglQueryPbufferARB GLH_INITIALIZER;
# endif
#endif

#ifdef WGL_ARB_pixel_format
# ifdef _WIN32
    GLH_EXTERN PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB GLH_INITIALIZER;
# endif
# ifdef _WIN32
    GLH_EXTERN PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB GLH_INITIALIZER;
# endif
#endif


#ifdef GLH_EXT_SINGLE_FILE

int glh_init_extension(const char* extension)
{
    if (NULL == extension) {
        return FALSE;
#ifdef GL_ARB_multitexture
    } else if (0 == strcmp(extension, "GL_ARB_multitexture")) {
        glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dARB");
        if (NULL == glMultiTexCoord1dARB)
            return FALSE;
        glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dvARB");
        if (NULL == glMultiTexCoord1dvARB)
            return FALSE;
        glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fARB");
        if (NULL == glMultiTexCoord1fARB)
            return FALSE;
        glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fvARB");
        if (NULL == glMultiTexCoord1fvARB)
            return FALSE;
        glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iARB");
        if (NULL == glMultiTexCoord1iARB)
            return FALSE;
        glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1ivARB");
        if (NULL == glMultiTexCoord1ivARB)
            return FALSE;
        glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sARB");
        if (NULL == glMultiTexCoord1sARB)
            return FALSE;
        glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1svARB");
        if (NULL == glMultiTexCoord1svARB)
            return FALSE;
        glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dARB");
        if (NULL == glMultiTexCoord2dARB)
            return FALSE;
        glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dvARB");
        if (NULL == glMultiTexCoord2dvARB)
            return FALSE;
        glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fARB");
        if (NULL == glMultiTexCoord2fARB)
            return FALSE;
        glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fvARB");
        if (NULL == glMultiTexCoord2fvARB)
            return FALSE;
        glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iARB");
        if (NULL == glMultiTexCoord2iARB)
            return FALSE;
        glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2ivARB");
        if (NULL == glMultiTexCoord2ivARB)
            return FALSE;
        glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sARB");
        if (NULL == glMultiTexCoord2sARB)
            return FALSE;
        glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2svARB");
        if (NULL == glMultiTexCoord2svARB)
            return FALSE;
        glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dARB");
        if (NULL == glMultiTexCoord3dARB)
            return FALSE;
        glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dvARB");
        if (NULL == glMultiTexCoord3dvARB)
            return FALSE;
        glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fARB");
        if (NULL == glMultiTexCoord3fARB)
            return FALSE;
        glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fvARB");
        if (NULL == glMultiTexCoord3fvARB)
            return FALSE;
        glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iARB");
        if (NULL == glMultiTexCoord3iARB)
            return FALSE;
        glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3ivARB");
        if (NULL == glMultiTexCoord3ivARB)
            return FALSE;
        glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sARB");
        if (NULL == glMultiTexCoord3sARB)
            return FALSE;
        glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3svARB");
        if (NULL == glMultiTexCoord3svARB)
            return FALSE;
        glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dARB");
        if (NULL == glMultiTexCoord4dARB)
            return FALSE;
        glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dvARB");
        if (NULL == glMultiTexCoord4dvARB)
            return FALSE;
        glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fARB");
        if (NULL == glMultiTexCoord4fARB)
            return FALSE;
        glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fvARB");
        if (NULL == glMultiTexCoord4fvARB)
            return FALSE;
        glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iARB");
        if (NULL == glMultiTexCoord4iARB)
            return FALSE;
        glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4ivARB");
        if (NULL == glMultiTexCoord4ivARB)
            return FALSE;
        glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sARB");
        if (NULL == glMultiTexCoord4sARB)
            return FALSE;
        glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4svARB");
        if (NULL == glMultiTexCoord4svARB)
            return FALSE;
        glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTextureARB");
        if (NULL == glActiveTextureARB)
            return FALSE;
        glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTextureARB");
        if (NULL == glClientActiveTextureARB)
            return FALSE;
#endif

#ifdef GL_ARB_texture_border_clamp
    } else if (0 == strcmp(extension, "GL_ARB_texture_border_clamp")) {
#endif

#ifdef GL_ARB_texture_compression
    } else if (0 == strcmp(extension, "GL_ARB_texture_compression")) {
        glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3DARB");
        if (NULL == glCompressedTexImage3DARB)
            return FALSE;
        glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2DARB");
        if (NULL == glCompressedTexImage2DARB)
            return FALSE;
        glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1DARB");
        if (NULL == glCompressedTexImage1DARB)
            return FALSE;
        glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3DARB");
        if (NULL == glCompressedTexSubImage3DARB)
            return FALSE;
        glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2DARB");
        if (NULL == glCompressedTexSubImage2DARB)
            return FALSE;
        glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1DARB");
        if (NULL == glCompressedTexSubImage1DARB)
            return FALSE;
        glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImageARB");
        if (NULL == glGetCompressedTexImageARB)
            return FALSE;
#endif

#ifdef GL_ARB_texture_cube_map
    } else if (0 == strcmp(extension, "GL_ARB_texture_cube_map")) {
#endif

#ifdef GL_ARB_transpose_matrix
    } else if (0 == strcmp(extension, "GL_ARB_transpose_matrix")) {
        glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixfARB");
        if (NULL == glLoadTransposeMatrixfARB)
            return FALSE;
        glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixdARB");
        if (NULL == glLoadTransposeMatrixdARB)
            return FALSE;
        glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixfARB");
        if (NULL == glMultTransposeMatrixfARB)
            return FALSE;
        glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixdARB");
        if (NULL == glMultTransposeMatrixdARB)
            return FALSE;
#endif

#ifdef GL_EXT_abgr
    } else if (0 == strcmp(extension, "GL_EXT_abgr")) {
#endif

#ifdef GL_EXT_bgra
    } else if (0 == strcmp(extension, "GL_EXT_bgra")) {
#endif

#ifdef GL_EXT_blend_color
    } else if (0 == strcmp(extension, "GL_EXT_blend_color")) {
        glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColorEXT");
        if (NULL == glBlendColorEXT)
            return FALSE;
#endif

#ifdef GL_EXT_blend_minmax
    } else if (0 == strcmp(extension, "GL_EXT_blend_minmax")) {
        glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationEXT");
        if (NULL == glBlendEquationEXT)
            return FALSE;
#endif

#ifdef GL_EXT_blend_subtract
    } else if (0 == strcmp(extension, "GL_EXT_blend_subtract")) {
#endif

#ifdef GL_EXT_compiled_vertex_array
    } else if (0 == strcmp(extension, "GL_EXT_compiled_vertex_array")) {
        glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glLockArraysEXT");
        if (NULL == glLockArraysEXT)
            return FALSE;
        glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUnlockArraysEXT");
        if (NULL == glUnlockArraysEXT)
            return FALSE;
#endif

#ifdef GL_EXT_fog_coord
    } else if (0 == strcmp(extension, "GL_EXT_fog_coord")) {
        glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddEXT");
        if (NULL == glFogCoorddEXT)
            return FALSE;
        glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddvEXT");
        if (NULL == glFogCoorddvEXT)
            return FALSE;
        glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfEXT");
        if (NULL == glFogCoordfEXT)
            return FALSE;
        glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfvEXT");
        if (NULL == glFogCoordfvEXT)
            return FALSE;
        glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointerEXT");
        if (NULL == glFogCoordPointerEXT)
            return FALSE;
#endif

#ifdef GL_EXT_light_max_exponent
    } else if (0 == strcmp(extension, "GL_EXT_light_max_exponent")) {
#endif

#ifdef GL_EXT_packed_pixels
    } else if (0 == strcmp(extension, "GL_EXT_packed_pixels")) {
#endif

#ifdef GL_EXT_paletted_texture
    } else if (0 == strcmp(extension, "GL_EXT_paletted_texture")) {
        glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTableEXT");
        if (NULL == glColorSubTableEXT)
            return FALSE;
        glcolorTableEXT = (PFNGLCOLORTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glcolorTableEXT");
        if (NULL == glcolorTableEXT)
            return FALSE;
        glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableEXT");
        if (NULL == glGetColorTableEXT)
            return FALSE;
        glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfvEXT");
        if (NULL == glGetColorTableParameterfvEXT)
            return FALSE;
        glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterivEXT");
        if (NULL == glGetColorTableParameterivEXT)
            return FALSE;
#endif

#ifdef GL_EXT_point_parameters
    } else if (0 == strcmp(extension, "GL_EXT_point_parameters")) {
        glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfEXT");
        if (NULL == glPointParameterfEXT)
            return FALSE;
        glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvEXT");
        if (NULL == glPointParameterfvEXT)
            return FALSE;
#endif

#ifdef GL_EXT_rescale_normal
    } else if (0 == strcmp(extension, "GL_EXT_rescale_normal")) {
#endif

#ifdef GL_EXT_secondary_color
    } else if (0 == strcmp(extension, "GL_EXT_secondary_color")) {
        glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bEXT");
        if (NULL == glSecondaryColor3bEXT)
            return FALSE;
        glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bvEXT");
        if (NULL == glSecondaryColor3bvEXT)
            return FALSE;
        glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dEXT");
        if (NULL == glSecondaryColor3dEXT)
            return FALSE;
        glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dvEXT");
        if (NULL == glSecondaryColor3dvEXT)
            return FALSE;
        glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fEXT");
        if (NULL == glSecondaryColor3fEXT)
            return FALSE;
        glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fvEXT");
        if (NULL == glSecondaryColor3fvEXT)
            return FALSE;
        glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iEXT");
        if (NULL == glSecondaryColor3iEXT)
            return FALSE;
        glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ivEXT");
        if (NULL == glSecondaryColor3ivEXT)
            return FALSE;
        glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sEXT");
        if (NULL == glSecondaryColor3sEXT)
            return FALSE;
        glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3svEXT");
        if (NULL == glSecondaryColor3svEXT)
            return FALSE;
        glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubEXT");
        if (NULL == glSecondaryColor3ubEXT)
            return FALSE;
        glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubvEXT");
        if (NULL == glSecondaryColor3ubvEXT)
            return FALSE;
        glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiEXT");
        if (NULL == glSecondaryColor3uiEXT)
            return FALSE;
        glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uivEXT");
        if (NULL == glSecondaryColor3uivEXT)
            return FALSE;
        glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usEXT");
        if (NULL == glSecondaryColor3usEXT)
            return FALSE;
        glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usvEXT");
        if (NULL == glSecondaryColor3usvEXT)
            return FALSE;
        glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointerEXT");
        if (NULL == glSecondaryColorPointerEXT)
            return FALSE;
#endif

#ifdef GL_EXT_separate_specular_color
    } else if (0 == strcmp(extension, "GL_EXT_separate_specular_color")) {
#endif

#ifdef GL_EXT_shared_texture_palette
    } else if (0 == strcmp(extension, "GL_EXT_shared_texture_palette")) {
#endif

#ifdef GL_EXT_stencil_wrap
    } else if (0 == strcmp(extension, "GL_EXT_stencil_wrap")) {
#endif

#ifdef GL_EXT_texture_compression_s3tc
    } else if (0 == strcmp(extension, "GL_EXT_texture_compression_s3tc")) {
#endif

#ifdef GL_EXT_texture_cube_map
    } else if (0 == strcmp(extension, "GL_EXT_texture_cube_map")) {
#endif

#ifdef GL_EXT_texture_edge_clamp
    } else if (0 == strcmp(extension, "GL_EXT_texture_edge_clamp")) {
#endif

#ifdef GL_EXT_texture_env_add
    } else if (0 == strcmp(extension, "GL_EXT_texture_env_add")) {
#endif

#ifdef GL_EXT_texture_env_combine
    } else if (0 == strcmp(extension, "GL_EXT_texture_env_combine")) {
#endif

#ifdef GL_EXT_texture_filter_anisotropic
    } else if (0 == strcmp(extension, "GL_EXT_texture_filter_anisotropic")) {
#endif

#ifdef GL_EXT_texture_lod_bias
    } else if (0 == strcmp(extension, "GL_EXT_texture_lod_bias")) {
#endif

#ifdef GL_EXT_texture_object
    } else if (0 == strcmp(extension, "GL_EXT_texture_object")) {
        glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glAreTexturesResidentEXT");
        if (NULL == glAreTexturesResidentEXT)
            return FALSE;
        glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTextureEXT");
        if (NULL == glBindTextureEXT)
            return FALSE;
        glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteTexturesEXT");
        if (NULL == glDeleteTexturesEXT)
            return FALSE;
        glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenTexturesEXT");
        if (NULL == glGenTexturesEXT)
            return FALSE;
        glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsTextureEXT");
        if (NULL == glIsTextureEXT)
            return FALSE;
        glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPrioritizeTexturesEXT");
        if (NULL == glPrioritizeTexturesEXT)
            return FALSE;
#endif

#ifdef GL_EXT_vertex_array
    } else if (0 == strcmp(extension, "GL_EXT_vertex_array")) {
        glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glArrayElementEXT");
        if (NULL == glArrayElementEXT)
            return FALSE;
        glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointerEXT");
        if (NULL == glColorPointerEXT)
            return FALSE;
        glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEdgeFlagPointerEXT");
        if (NULL == glEdgeFlagPointerEXT)
            return FALSE;
        glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPointervEXT");
        if (NULL == glGetPointervEXT)
            return FALSE;
        glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexPointerEXT");
        if (NULL == glIndexPointerEXT)
            return FALSE;
        glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointerEXT");
        if (NULL == glNormalPointerEXT)
            return FALSE;
        glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointerEXT");
        if (NULL == glTexCoordPointerEXT)
            return FALSE;
        glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointerEXT");
        if (NULL == glVertexPointerEXT)
            return FALSE;
        glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawArraysEXT");
        if (NULL == glDrawArraysEXT)
            return FALSE;
#endif

#ifdef GL_EXT_vertex_weighting
    } else if (0 == strcmp(extension, "GL_EXT_vertex_weighting")) {
        glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightfEXT");
        if (NULL == glVertexWeightfEXT)
            return FALSE;
        glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightfvEXT");
        if (NULL == glVertexWeightfvEXT)
            return FALSE;
        glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightPointerEXT");
        if (NULL == glVertexWeightPointerEXT)
            return FALSE;
#endif

#ifdef GL_NV_blend_square
    } else if (0 == strcmp(extension, "GL_NV_blend_square")) {
#endif

#ifdef GL_NV_evaluators
    } else if (0 == strcmp(extension, "GL_NV_evaluators")) {
        glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapControlPointsNV");
        if (NULL == glMapControlPointsNV)
            return FALSE;
        glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapParameterivNV");
        if (NULL == glMapParameterivNV)
            return FALSE;
        glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapParameterfvNV");
        if (NULL == glMapParameterfvNV)
            return FALSE;
        glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapControlPointsNV");
        if (NULL == glGetMapControlPointsNV)
            return FALSE;
        glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapParameterivNV");
        if (NULL == glGetMapParameterivNV)
            return FALSE;
        glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapParameterfvNV");
        if (NULL == glGetMapParameterfvNV)
            return FALSE;
        glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapAttribParameterivNV");
        if (NULL == glGetMapAttribParameterivNV)
            return FALSE;
        glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapAttribParameterfvNV");
        if (NULL == glGetMapAttribParameterfvNV)
            return FALSE;
        glEvalMapsNV = (PFNGLEVALMAPSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEvalMapsNV");
        if (NULL == glEvalMapsNV)
            return FALSE;
#endif

#ifdef GL_NV_fence
    } else if (0 == strcmp(extension, "GL_NV_fence")) {
        glGenFencesNV = (PFNGLGENFENCESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFencesNV");
        if (NULL == glGenFencesNV)
            return FALSE;
        glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFencesNV");
        if (NULL == glDeleteFencesNV)
            return FALSE;
        glSetFenceNV = (PFNGLSETFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFenceNV");
        if (NULL == glSetFenceNV)
            return FALSE;
        glTestFenceNV = (PFNGLTESTFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glTestFenceNV");
        if (NULL == glTestFenceNV)
            return FALSE;
        glFinishFenceNV = (PFNGLFINISHFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishFenceNV");
        if (NULL == glFinishFenceNV)
            return FALSE;
        glIsFenceNV = (PFNGLISFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFenceNV");
        if (NULL == glIsFenceNV)
            return FALSE;
        glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFenceivNV");
        if (NULL == glGetFenceivNV)
            return FALSE;
#endif

#ifdef GL_NV_fog_distance
    } else if (0 == strcmp(extension, "GL_NV_fog_distance")) {
#endif

#ifdef GL_NV_packed_depth_stencil
    } else if (0 == strcmp(extension, "GL_NV_packed_depth_stencil")) {
#endif

#ifdef GL_NV_register_combiners
    } else if (0 == strcmp(extension, "GL_NV_register_combiners")) {
        glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterfvNV");
        if (NULL == glCombinerParameterfvNV)
            return FALSE;
        glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterfNV");
        if (NULL == glCombinerParameterfNV)
            return FALSE;
        glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterivNV");
        if (NULL == glCombinerParameterivNV)
            return FALSE;
        glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameteriNV");
        if (NULL == glCombinerParameteriNV)
            return FALSE;
        glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerInputNV");
        if (NULL == glCombinerInputNV)
            return FALSE;
        glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerOutputNV");
        if (NULL == glCombinerOutputNV)
            return FALSE;
        glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFinalCombinerInputNV");
        if (NULL == glFinalCombinerInputNV)
            return FALSE;
        glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerInputParameterfvNV");
        if (NULL == glGetCombinerInputParameterfvNV)
            return FALSE;
        glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerInputParameterivNV");
        if (NULL == glGetCombinerInputParameterivNV)
            return FALSE;
        glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerOutputParameterfvNV");
        if (NULL == glGetCombinerOutputParameterfvNV)
            return FALSE;
        glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerOutputParameterivNV");
        if (NULL == glGetCombinerOutputParameterivNV)
            return FALSE;
        glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFinalCombinerInputParameterfvNV");
        if (NULL == glGetFinalCombinerInputParameterfvNV)
            return FALSE;
        glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFinalCombinerInputParameterivNV");
        if (NULL == glGetFinalCombinerInputParameterivNV)
            return FALSE;
#endif

#ifdef GL_NV_register_combiners2
    } else if (0 == strcmp(extension, "GL_NV_register_combiners2")) {
        glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerStageParameterfvNV");
        if (NULL == glCombinerStageParameterfvNV)
            return FALSE;
        glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerStageParameterfvNV");
        if (NULL == glGetCombinerStageParameterfvNV)
            return FALSE;
#endif

#ifdef GL_NV_texgen_reflection
    } else if (0 == strcmp(extension, "GL_NV_texgen_reflection")) {
#endif

#ifdef GL_NV_texture_env_combine4
    } else if (0 == strcmp(extension, "GL_NV_texture_env_combine4")) {
#endif

#ifdef GL_NV_texture_rectangle
    } else if (0 == strcmp(extension, "GL_NV_texture_rectangle")) {
#endif

#ifdef GL_NV_texture_shader
    } else if (0 == strcmp(extension, "GL_NV_texture_shader")) {
#endif

#ifdef GL_NV_vertex_array_range
    } else if (0 == strcmp(extension, "GL_NV_vertex_array_range")) {
        glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushVertexArrayRangeNV");
        if (NULL == glFlushVertexArrayRangeNV)
            return FALSE;
        glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayRangeNV");
        if (NULL == glVertexArrayRangeNV)
            return FALSE;
# ifdef _WIN32
        wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC)GLH_EXT_GET_PROC_ADDRESS("wglAllocateMemoryNV");
        if (NULL == wglAllocateMemoryNV)
            return FALSE;
# endif
# ifdef GLX_VERSION_1_3
        glXAllocateMemoryNV = (PFNGLXALLOCATEMEMORYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glXAllocateMemoryNV");
        if (NULL == glXAllocateMemoryNV)
            return FALSE;
# endif
# ifdef _WIN32
        wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC)GLH_EXT_GET_PROC_ADDRESS("wglFreeMemoryNV");
        if (NULL == wglFreeMemoryNV)
            return FALSE;
# endif
# ifdef GLX_VERSION_1_3
        glXFreeMemoryNV = (PFNGLXFREEMEMORYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glXFreeMemoryNV");
        if (NULL == glXFreeMemoryNV)
            return FALSE;
# endif
#endif

#ifdef GL_NV_vertex_program
    } else if (0 == strcmp(extension, "GL_NV_vertex_program")) {
        glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glAreProgramsResidentNV");
        if (NULL == glAreProgramsResidentNV)
            return FALSE;
        glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindProgramNV");
        if (NULL == glBindProgramNV)
            return FALSE;
        glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgramsNV");
        if (NULL == glDeleteProgramsNV)
            return FALSE;
        glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glExecuteProgramNV");
        if (NULL == glExecuteProgramNV)
            return FALSE;
        glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenProgramsNV");
        if (NULL == glGenProgramsNV)
            return FALSE;
        glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramParameterdvNV");
        if (NULL == glGetProgramParameterdvNV)
            return FALSE;
        glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramParameterfvNV");
        if (NULL == glGetProgramParameterfvNV)
            return FALSE;
        glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramivNV");
        if (NULL == glGetProgramivNV)
            return FALSE;
        glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramStringNV");
        if (NULL == glGetProgramStringNV)
            return FALSE;
        glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTrackMatrixivNV");
        if (NULL == glGetTrackMatrixivNV)
            return FALSE;
        glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdvNV");
        if (NULL == glGetVertexAttribdvNV)
            return FALSE;
        glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfvNV");
        if (NULL == glGetVertexAttribfvNV)
            return FALSE;
        glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribivNV");
        if (NULL == glGetVertexAttribivNV)
            return FALSE;
        glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointervNV");
		// temporary hack to deal with driver bug -- Cass
        if (NULL == glGetVertexAttribPointervNV)
			glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointerNV");
        if (NULL == glGetVertexAttribPointervNV)
            return FALSE;
        glIsProgramNV = (PFNGLISPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgramNV");
        if (NULL == glIsProgramNV)
            return FALSE;
        glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadProgramNV");
        if (NULL == glLoadProgramNV)
            return FALSE;
        glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4dNV");
        if (NULL == glProgramParameter4dNV)
            return FALSE;
        glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4dvNV");
        if (NULL == glProgramParameter4dvNV)
            return FALSE;
        glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4fNV");
        if (NULL == glProgramParameter4fNV)
            return FALSE;
        glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4fvNV");
        if (NULL == glProgramParameter4fvNV)
            return FALSE;
        glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameters4dvNV");
        if (NULL == glProgramParameters4dvNV)
            return FALSE;
        glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameters4fvNV");
        if (NULL == glProgramParameters4fvNV)
            return FALSE;
        glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glRequestResidentProgramsNV");
        if (NULL == glRequestResidentProgramsNV)
            return FALSE;
        glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTrackMatrixNV");
        if (NULL == glTrackMatrixNV)
            return FALSE;
        glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointerNV");
        if (NULL == glVertexAttribPointerNV)
            return FALSE;
        glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dNV");
        if (NULL == glVertexAttrib1dNV)
            return FALSE;
        glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dvNV");
        if (NULL == glVertexAttrib1dvNV)
            return FALSE;
        glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fNV");
        if (NULL == glVertexAttrib1fNV)
            return FALSE;
        glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fvNV");
        if (NULL == glVertexAttrib1fvNV)
            return FALSE;
        glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sNV");
        if (NULL == glVertexAttrib1sNV)
            return FALSE;
        glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1svNV");
        if (NULL == glVertexAttrib1svNV)
            return FALSE;
        glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dNV");
        if (NULL == glVertexAttrib2dNV)
            return FALSE;
        glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dvNV");
        if (NULL == glVertexAttrib2dvNV)
            return FALSE;
        glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fNV");
        if (NULL == glVertexAttrib2fNV)
            return FALSE;
        glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fvNV");
        if (NULL == glVertexAttrib2fvNV)
            return FALSE;
        glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sNV");
        if (NULL == glVertexAttrib2sNV)
            return FALSE;
        glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2svNV");
        if (NULL == glVertexAttrib2svNV)
            return FALSE;
        glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dNV");
        if (NULL == glVertexAttrib3dNV)
            return FALSE;
        glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dvNV");
        if (NULL == glVertexAttrib3dvNV)
            return FALSE;
        glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fNV");
        if (NULL == glVertexAttrib3fNV)
            return FALSE;
        glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fvNV");
        if (NULL == glVertexAttrib3fvNV)
            return FALSE;
        glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sNV");
        if (NULL == glVertexAttrib3sNV)
            return FALSE;
        glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3svNV");
        if (NULL == glVertexAttrib3svNV)
            return FALSE;
        glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dNV");
        if (NULL == glVertexAttrib4dNV)
            return FALSE;
        glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dvNV");
        if (NULL == glVertexAttrib4dvNV)
            return FALSE;
        glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fNV");
        if (NULL == glVertexAttrib4fNV)
            return FALSE;
        glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fvNV");
        if (NULL == glVertexAttrib4fvNV)
            return FALSE;
        glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sNV");
        if (NULL == glVertexAttrib4sNV)
            return FALSE;
        glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4svNV");
        if (NULL == glVertexAttrib4svNV)
            return FALSE;
        glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubvNV");
        if (NULL == glVertexAttrib4ubvNV)
            return FALSE;
        glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1dvNV");
        if (NULL == glVertexAttribs1dvNV)
            return FALSE;
        glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1fvNV");
        if (NULL == glVertexAttribs1fvNV)
            return FALSE;
        glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1svNV");
        if (NULL == glVertexAttribs1svNV)
            return FALSE;
        glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2dvNV");
        if (NULL == glVertexAttribs2dvNV)
            return FALSE;
        glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2fvNV");
        if (NULL == glVertexAttribs2fvNV)
            return FALSE;
        glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2svNV");
        if (NULL == glVertexAttribs2svNV)
            return FALSE;
        glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3dvNV");
        if (NULL == glVertexAttribs3dvNV)
            return FALSE;
        glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3fvNV");
        if (NULL == glVertexAttribs3fvNV)
            return FALSE;
        glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3svNV");
        if (NULL == glVertexAttribs3svNV)
            return FALSE;
        glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4dvNV");
        if (NULL == glVertexAttribs4dvNV)
            return FALSE;
        glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4fvNV");
        if (NULL == glVertexAttribs4fvNV)
            return FALSE;
        glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4svNV");
        if (NULL == glVertexAttribs4svNV)
            return FALSE;
        glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4ubvNV");
        if (NULL == glVertexAttribs4ubvNV)
            return FALSE;
#endif

#ifdef GL_SGIS_texture_lod
    } else if (0 == strcmp(extension, "GL_SGIS_texture_lod")) {
#endif

#ifdef GL_SGIX_depth_texture
    } else if (0 == strcmp(extension, "GL_SGIX_depth_texture")) {
#endif

#ifdef GL_SGIX_shadow
    } else if (0 == strcmp(extension, "GL_SGIX_shadow")) {
#endif

#ifdef GL_VERSION_1_2
    } else if (0 == strcmp(extension, "GL_VERSION_1_2")) {
        _glBlendColor = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == _glBlendColor)
            return FALSE;
        _glBlendEquation = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == _glBlendEquation)
            return FALSE;
        _glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == _glDrawRangeElements)
            return FALSE;
        _glColorTable = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == _glColorTable)
            return FALSE;
        _glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == _glColorTableParameterfv)
            return FALSE;
        _glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == _glColorTableParameteriv)
            return FALSE;
        _glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == _glCopyColorTable)
            return FALSE;
        _glGetColorTable = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == _glGetColorTable)
            return FALSE;
        _glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == _glGetColorTableParameterfv)
            return FALSE;
        _glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == _glGetColorTableParameteriv)
            return FALSE;
        _glTexImage3D = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == _glTexImage3D)
            return FALSE;
        _glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == _glTexSubImage3D)
            return FALSE;
        _glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == _glCopyTexSubImage3D)
            return FALSE;
#endif

#ifdef GL_WIN_swap_hint
    } else if (0 == strcmp(extension, "GL_WIN_swap_hint")) {
        glAddSwapHintRectWIN = (PFNGLADDSWAPHINTRECTWINPROC)GLH_EXT_GET_PROC_ADDRESS("glAddSwapHintRectWIN");
        if (NULL == glAddSwapHintRectWIN)
            return FALSE;
#endif

#ifdef WGL_ARB_pbuffer
    } else if (0 == strcmp(extension, "WGL_ARB_pbuffer")) {
# ifdef _WIN32
        wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglCreatePbufferARB");
        if (NULL == wglCreatePbufferARB)
            return FALSE;
# endif
# ifdef _WIN32
        wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglGetPbufferDCARB");
        if (NULL == wglGetPbufferDCARB)
            return FALSE;
# endif
# ifdef _WIN32
        wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglReleasePbufferDCARB");
        if (NULL == wglReleasePbufferDCARB)
            return FALSE;
# endif
# ifdef _WIN32
        wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglDestroyPbufferARB");
        if (NULL == wglDestroyPbufferARB)
            return FALSE;
# endif
# ifdef _WIN32
        wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglQueryPbufferARB");
        if (NULL == wglQueryPbufferARB)
            return FALSE;
# endif
#endif

#ifdef WGL_ARB_pixel_format
    } else if (0 == strcmp(extension, "WGL_ARB_pixel_format")) {
# ifdef _WIN32
        wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglGetPixelFormatAttribivARB");
        if (NULL == wglGetPixelFormatAttribivARB)
            return FALSE;
# endif
# ifdef _WIN32
        wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglGetPixelFormatAttribfvARB");
        if (NULL == wglGetPixelFormatAttribfvARB)
            return FALSE;
# endif
# ifdef _WIN32
        wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC)GLH_EXT_GET_PROC_ADDRESS("wglChoosePixelFormatARB");
        if (NULL == wglChoosePixelFormatARB)
            return FALSE;
# endif
#endif

    } else {
        return FALSE;
    }
    return TRUE;
}
#endif

#undef GLH_EXT_SINGLE_FILE

#endif /* GLH_GENEXT_H */
